# -*- coding: utf-8 -*-
"""K_Means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hA8Xe1z3_ZQrpfGCpC_2ujSE1czly6Pv
"""

import numpy as np
import matplotlib.pyplot as plt

def assign_random_clusters(X,k):
  indexes = np.random.choice(X.shape[0],k,replace=False)
  return X[indexes]

def distance(a,b):
  return np.linalg.norm(a-b, axis=1)

def assign_cluster(X,indexes):
  return np.array([np.argmin(distance(i,indexes)) for i in X])

def recalc_centroid(X,label,k):
  return np.array([X[label ==i].mean(axis=0) for i in range(k)])

def KMeans(X,k):
  max_iters = 700
  t = 1e-4
  initial_centers = assign_random_clusters(X,k)
  for i in range(max_iters):
    labels = assign_cluster(X,initial_centers)
    new_centroids = recalc_centroid(X,labels,k)
    if np.all(np.abs(new_centroids-initial_centers)<t):
      break
    initial_centers = new_centroids
  return initial_centers,labels

#i randomly assign 3 centers
# i check the dist btw all points and each center and assign it to the nearest center
# i then calc the centroids for each center center and see how much they are varying

from sklearn.datasets import make_blobs
X,_ = make_blobs(n_samples=100,centers=3,random_state=42)
#samples = np.random.rand(100,2)
k = 3
centroids,labels = KMeans(X,k)
print(centroids,labels)

plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
plt.scatter(centroids[:, 0], centroids[:, 1], color='red', marker='x')
plt.title("K-Means Clustering from Scratch")
plt.show()